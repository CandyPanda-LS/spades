import { useState, useEffect } from "react";
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import todoAPI from "./api/todo/todo.api";

export default function Todo() {
	const [todos, setTodos] = useState([]);
	const [todo, setTodo] = useState({ title: "" });

	useEffect(() => {
		getTodoList()
	})

	const handleChange = ({ currentTarget: input }) => {
		input.value === ""
			? setTodo({ title: "" })
			: setTodo((prev) => ({ ...prev, title: input.value }));
	};


	const addTodo = async (e) => {

		e.preventDefault();
		const postObj = {
			title: todo.title
		}
		todoAPI.addTodo(postObj).then((res) => {
			todos.push(res)
			setTodos(todos)
			setTodo({ title: "" });

		}

		).catch((e) => {
			console.log(e)
		}

		);

	};

	const getTodoList = () => {
		todoAPI.getTodoList().then((todoListTemp) => {
			setTodos(todoListTemp)
		}).catch(e => console.log(e))
	};

	const getTodoById = (id) => {
		todoAPI.getTodoById(id).then((todoTemp) => {
			setTodo(todoTemp)
		}).catch(e => console.log(e))
	};

	const editTodo = async (id) => {
		const currentTask = todos.filter((todo) => todo._id === id);
		setTodo(currentTask[0]);
		todoAPI.deleteTodo(id)


	};

	const updateTodoStatus = async (id, status) => {
		const tempTodoObj = {
			status: !status
		}
		todoAPI.updateTodoStatus(id, tempTodoObj).then().catch();
	};

	const deleteTodo = async (id) => {
		todoAPI.deleteTodo(id).then().catch()
	};

	const logout = () => {
		localStorage.removeItem('token');
		window.location.href = '/';
	}



	return (
		<div >
			<Head>
				<title>Todoey</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className={styles.main}>
				<h1 className={styles.heading}>TodoeY - todo list application</h1>
				<div className={styles.container}>
					<form onSubmit={addTodo} className={styles.form_container}>
						<input
							className={styles.input}
							type="text"
							placeholder="Task to be done..."
							onChange={handleChange}
							value={todo.title}
						/>
						<button type="submit" className={styles.submit_btn}>
							{todo._id ? "Update" : "Add"}
						</button>
					</form>
					{todos.map((todo) => (
						<div className={styles.task_container} key={todo._id}>
							<input
								type="checkbox"
								className={styles.check_box}
								checked={todo.status}
								onChange={() => updateTodoStatus(todo._id, todo.status)}
							/>
							<p
								className={
									todo.status
										? styles.task_text + " " + styles.line_through
										: styles.task_text
								}
							>
								{todo.title}
							</p>
							<button
								onClick={() => editTodo(todo._id)}
								className={styles.edit_task}
							>
								&#9998;
							</button>
							<button
								onClick={() => deleteTodo(todo._id)}
								className={styles.remove_task}
							>
								&#10006;
							</button>
						</div>
					))}
					{todos.length === 0 && <h2 className={styles.no_tasks}>No tasks</h2>}
					<button onClick={logout} className={styles.logout_btn}>
						Logout
					</button>
				</div>
			</main>
		</div>
	)
}
